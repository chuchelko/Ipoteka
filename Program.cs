using Microsoft.Extensions.Hosting;

using StackExchange.Redis;

using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Ipoteka.Services;
using System.Globalization;

var builder = Host.CreateApplicationBuilder(args);
var host = builder.Build();
Console.WriteLine(Environment.GetEnvironmentVariable("REDIS_URL"));
Console.WriteLine(Environment.GetEnvironmentVariable("READ_TOKENS"));
Console.WriteLine(Environment.GetEnvironmentVariable("WRITE_TOKENS"));
Console.WriteLine(Environment.GetEnvironmentVariable("FIN_TOKEN"));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
var redisConnection = await ConnectionMultiplexer.ConnectAsync(
    Environment.GetEnvironmentVariable("REDIS_URL") ?? "localhost:6379");
var redis = redisConnection.GetDatabase();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
var token = Environment.GetEnvironmentVariable("BOT_TOKEN")
    ?? throw new Exception("BOT_TOKEN environment variable is not set");
var botClient = new TelegramBotClient(token);

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞
var readTokens = Environment.GetEnvironmentVariable("READ_TOKENS")?.Split(',')
                 ?? throw new Exception("READ_TOKENS not set");
var writeTokens = Environment.GetEnvironmentVariable("WRITE_TOKENS")?.Split(',')
                 ?? throw new Exception("WRITE_TOKENS not set");
var finToken = Environment.GetEnvironmentVariable("FIN_TOKEN")?.Split(',')
                 ?? throw new Exception("FIN_TOKEN not set");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
var ipotekaHandler = new Ipoteka.Handlers.IpotekaHandler(botClient, readTokens, writeTokens);
var financeHandler = new Ipoteka.Handlers.FinanceHandler(botClient, finToken);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var reminderService = new MonthlyReminderService(botClient, redis, readTokens);
reminderService.Start();
var receiverOptions = new ReceiverOptions
{
    AllowedUpdates = []
};

botClient.StartReceiving(
    updateHandler: HandleUpdateAsync,
    errorHandler: HandlePollingErrorAsync,
    receiverOptions: receiverOptions
);

Console.WriteLine("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
await host.RunAsync();

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
{
    if (update.Message is { } message)
    {
        var chatId = message.Chat.Id;
        var userId = message.From?.Id ?? 0;
        var text = message.Text ?? string.Empty;
        var command = text.Split(' ')[0].ToLower();

        try
        {
            switch (command)
            {
                case "/start":
                    await SendHelp(chatId);
                    break;

                case "/authorize":
                    await ipotekaHandler.HandleAuthorize(chatId, text, redis);
                    break;

                case "/user_authorize":
                    await ipotekaHandler.HandleUserAuthorize(userId, text, redis);
                    break;

                case "/set":
                    await ipotekaHandler.HandleSet(chatId, userId, text, redis);
                    break;

                case "/pay":
                    await ipotekaHandler.HandlePay(userId, text, redis);
                    break;

                case "/status":
                    await ipotekaHandler.ShowStatus(chatId, redis);
                    break;

                case "/history":
                    await ipotekaHandler.ShowHistory(chatId, redis);
                    break;

                case "/fin_auth":
                    await financeHandler.HandleFinAuth(userId, text, redis);
                    break;

                case "/fin_add_category":
                    await financeHandler.HandleFinAddCategory(userId, text, redis);
                    break;

                case "/fin_categories":
                    await financeHandler.HandleFinListCategories(userId, redis);
                    break;

                case "/fin_set_budget":
                    await financeHandler.HandleFinSetBudget(userId, text, redis);
                    break;

                case "/fin_add_expense":
                    await financeHandler.HandleFinAddExpense(userId, redis);
                    break;

                case "/fin_analytics":
                    await financeHandler.HandleFinAnalytics(userId, text, redis);
                    break;

                case "/fin_history":
                    await financeHandler.HandleExpenseHistory(userId, text, redis);
                    break;

                case "/gav":
                    await botClient.SendMessage(chatId, "–ì–ê–í");
                    break;

                default:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É–º–º–æ–π —Ä–∞—Å—Ö–æ–¥–∞
                    if (decimal.TryParse(text.Replace(" ", "").Replace(",", "."), NumberStyles.Currency, CultureInfo.InvariantCulture, out _))
                    {
                        await financeHandler.HandleExpenseAmount(userId, text, redis);
                    }
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º —Ä–∞—Å—Ö–æ–¥–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    else if (IsCategoryPlannedAmountInput(userId, text, redis))
                    {
                        await financeHandler.HandleCategoryPlannedAmount(userId, text, redis);
                    }
                    else
                    {
                        await botClient.SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {ex.Message}");
            await botClient.SendMessage(chatId, $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
        }
    }
    else if (update.CallbackQuery is { } callbackQuery)
    {
        var userId = callbackQuery.From.Id;
        var callbackData = callbackQuery.Data ?? string.Empty;

        try
        {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
            if (callbackData.StartsWith("expense_category:"))
            {
                await financeHandler.HandleExpenseCallback(userId, callbackData, redis);
            }
            else if (callbackData.StartsWith("expense_amount:"))
            {
                var parts = callbackData.Split(':');
                if (parts.Length >= 3)
                {
                    var category = parts[1];
                    var tempCategoryKey = $"expense_temp_category:{userId}";
                    await redis.StringSetAsync(tempCategoryKey, category);

                    await botClient.AnswerCallbackQuery(callbackData, null, showAlert: false);
                    await botClient.SendMessage(userId, "üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):");
                }
            }
            else if (callbackData.StartsWith("expense_cancel:"))
            {
                var tempCategoryKey = $"expense_temp_category:{userId}";
                await redis.KeyDeleteAsync(tempCategoryKey);

                await botClient.AnswerCallbackQuery(callbackData, null, showAlert: false);
                await botClient.SendMessage(userId, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            }
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            else if (callbackData.Contains("expense_history") || callbackData.Contains("expense_edit") || callbackData.Contains("expense_delete"))
            {
                await financeHandler.HandleExpenseHistoryCallback(userId, callbackData, redis);
            }
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            else if (callbackData.StartsWith("analytics_month:"))
            {
                var parts = callbackData.Split(':');
                if (parts.Length >= 3)
                {
                    var month = parts[1];
                    await botClient.AnswerCallbackQuery(callbackData, null, showAlert: false);
                    await financeHandler.ShowExpenseAnalytics(userId, month, redis);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {ex.Message}");
        }
    }
}

async Task SendHelp(long chatId)
{
    await botClient.SendMessage(chatId,
        "üè¶ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–º\n\n" +
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
        "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:\n" +
        "/authorize [—Ç–æ–∫–µ–Ω] - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —á–∞—Ç (—á—Ç–µ–Ω–∏–µ)\n" +
        "/user_authorize [—Ç–æ–∫–µ–Ω] - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å–µ–±—è (–∑–∞–ø–∏—Å—å)\n\n" +
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–º:\n" +
        "/set [—Å—É–º–º–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞\n" +
        "/pay [—Å—É–º–º–∞] - –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂\n" +
        "/status - —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫\n" +
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n\n" +
        "üí≥ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç:\n" +
        "/fin_auth [—Ç–æ–∫–µ–Ω] - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n" +
        "/fin_add_category [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤\n" +
        "/fin_categories - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n" +
        "/fin_set_budget [–º–µ—Å—è—Ü] [—Å—É–º–º–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü\n" +
        "/fin_add_expense - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (–ø–æ –∫–Ω–æ–ø–∫–∞–º)\n" +
        "/fin_history [–º–µ—Å—è—Ü] - –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n" +
        "/fin_analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n\n" +
        "üé≠ –ü—Ä–æ—á–µ–µ:\n" +
        "/gav - –≥–∞—Ñ");
}

bool IsCategoryPlannedAmountInput(long userId, string text, IDatabase redis)
{
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    var pattern = $"temp_category:{userId}:*";
    var server = redis.Multiplexer.GetServer(redis.Multiplexer.GetEndPoints()[0]);
    var tempKeys = server.Keys(pattern: pattern).ToArray();

    return tempKeys.Length > 0 && decimal.TryParse(text.Replace(" ", "").Replace(",", "."), NumberStyles.Currency, CultureInfo.InvariantCulture, out _);
}

Task HandlePollingErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken ct)
{
    var errorMessage = exception switch
    {
        ApiRequestException apiRequestException
            => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
        _ => exception.ToString()
    };

    Console.WriteLine(errorMessage);
    return Task.CompletedTask;
}
