using Ipoteka.Models;

using StackExchange.Redis;
using System.Globalization;
using System.Text.Json;

using Telegram.Bot;

namespace Ipoteka.Handlers;

public class IpotekaHandler
{
    public ITelegramBotClient botClient { get; set; }
    private readonly string[] readTokens;
    private readonly string[] writeTokens;

    public IpotekaHandler(ITelegramBotClient botClient, string[] readTokens, string[] writeTokens)
    {
        this.botClient = botClient;
        this.readTokens = readTokens;
        this.writeTokens = writeTokens;
    }

    private static DateTime GetCurrentTimeUtc3()
    {
        return TimeZoneInfo.ConvertTime(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Europe/Moscow"));
    }

    public async Task HandleAuthorize(long chatId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 2)
        {
            await botClient.SendMessage(chatId, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /authorize –≤–∞—à_—Ç–æ–∫–µ–Ω");
            return;
        }

        var token = parts[1].Trim();
        if (readTokens.Contains(token) || writeTokens.Contains(token))
        {
            await redis.SetAddAsync(UtilityKeys.AuthChatsKey(), chatId);
            await botClient.SendMessage(chatId, "‚úÖ –ß–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è!");
        }
        else
        {
            await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }
    }

    public async Task HandleUserAuthorize(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 2)
        {
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –ø–æ—ç—Ç–æ–º—É –æ—à–∏–±–∫—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        }

        var token = parts[1].Trim();
        if (writeTokens.Contains(token))
        {
            await redis.SetAddAsync(UtilityKeys.AuthUsersKey(), userId);
            await botClient.SendMessage(userId, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π!");
        }
        else
        {
            await botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }
    }

    public async Task HandleSet(long chatId, long userId, string text, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.AuthUsersKey(), userId))
        {
            await botClient.SendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞");
            return;
        }

        var parts = text.Split(' ');
        if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var amount))
        {
            await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set 100000");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
        var creditData = new CreditData
        {
            InitialAmount = amount,
            CurrentAmount = amount,
            LastUpdated = GetCurrentTimeUtc3()
        };

        await redis.StringSetAsync(UtilityKeys.CreditKey(), JsonSerializer.Serialize(creditData));

        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await redis.KeyDeleteAsync(UtilityKeys.HistoryKey());

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        await NotifyAllChats($"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {amount} —Ä", redis);
    }

    public async Task HandlePay(long userId, string text, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.AuthUsersKey(), userId))
        {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await botClient.SendMessage(userId,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /user_authorize [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var parts = text.Split(' ');
        if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var payment))
        {
            await botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay 15000");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
        var creditJson = await redis.StringGetAsync(UtilityKeys.CreditKey());
        if (creditJson.IsNullOrEmpty)
        {
            await botClient.SendMessage(userId, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (/set [—Å—É–º–º–∞])");
            return;
        }

        var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
        credit.CurrentAmount -= payment;
        credit.LastUpdated = GetCurrentTimeUtc3();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        await redis.StringSetAsync(UtilityKeys.CreditKey(), JsonSerializer.Serialize(credit));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏—é
        var paymentRecord = new PaymentRecord
        {
            UserId = userId,
            Amount = payment,
            Date = GetCurrentTimeUtc3(),
            NewBalance = credit.CurrentAmount
        };
        await redis.ListRightPushAsync(UtilityKeys.HistoryKey(), JsonSerializer.Serialize(paymentRecord));

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await botClient.SendMessage(userId,
            $"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment} —Ä –ø—Ä–∏–Ω—è—Ç!\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {credit.CurrentAmount} —Ä");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        await NotifyAllChats($"üí≥ –í–Ω–µ—Å–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment} —Ä\n–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä", redis);
    }

    public async Task ShowStatus(long chatId, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
        if (!await redis.SetContainsAsync(UtilityKeys.AuthChatsKey(), chatId))
        {
            await botClient.SendMessage(chatId, "‚ùå –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /authorize [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var creditJson = await redis.StringGetAsync(UtilityKeys.CreditKey());
        if (creditJson.IsNullOrEmpty)
        {
            await botClient.SendMessage(chatId, "‚ùå –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
            return;
        }

        var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
        await botClient.SendMessage(chatId, $"üí≥ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä");
    }

    public async Task ShowHistory(long chatId, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
        if (!await redis.SetContainsAsync(UtilityKeys.AuthChatsKey(), chatId))
        {
            await botClient.SendMessage(chatId, "‚ùå –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /authorize [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var history = await redis.ListRangeAsync(UtilityKeys.HistoryKey());
        if (history.Length == 0)
        {
            await botClient.SendMessage(chatId, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞");
            return;
        }

        var response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n";
        foreach (var item in history)
        {
            var payment = JsonSerializer.Deserialize<PaymentRecord>(item!);
            response += $"{payment!.Date:dd.MM.yyyy}: -{payment.Amount} —Ä ‚Üí {payment.NewBalance} —Ä\n";
        }

        await botClient.SendMessage(chatId, response);
    }

    private async Task NotifyAllChats(string message, IDatabase redis)
    {
        var chatIds = await redis.SetMembersAsync(UtilityKeys.AuthChatsKey());
        foreach (var chatIdValue in chatIds)
        {
            if (long.TryParse(chatIdValue.ToString(), out var chatId))
            {
                try
                {
                    await botClient.SendMessage(chatId, message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chatId}: {ex.Message}");
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —á–∞—Ç—ã
                    await redis.SetRemoveAsync(UtilityKeys.AuthChatsKey(), chatIdValue);
                }
            }
        }
    }
}
