using StackExchange.Redis;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Microsoft.Extensions.Hosting;
using System.Globalization;
using System.Text.Json;
using Microsoft.Extensions.Logging;

var builder = Host.CreateApplicationBuilder(args);
var host = builder.Build();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
var redisConnection = await ConnectionMultiplexer.ConnectAsync(
    Environment.GetEnvironmentVariable("REDIS_URL") ?? "localhost:6379");
var redis = redisConnection.GetDatabase();
var logger = LoggerFactory.Create(logging => logging.AddConsole()).CreateLogger<Program>();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
var token = Environment.GetEnvironmentVariable("BOT_TOKEN")
    ?? throw new Exception("BOT_TOKEN environment variable is not set");

logger.LogInformation($"Bot token: {token}");

var botClient = new TelegramBotClient(token);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var reminderService = new MonthlyReminderService(botClient, redis);
reminderService.Start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
var receiverOptions = new ReceiverOptions
{
    AllowedUpdates = []
};

botClient.StartReceiving(
    updateHandler: HandleUpdateAsync,
    errorHandler: HandlePollingErrorAsync,
    receiverOptions: receiverOptions
);

Console.WriteLine("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
await host.RunAsync();

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
{
    if (update.Message is not { } message || message.Text is not { } text)
        return;

    var chatId = message.Chat.Id;
    var command = text.Split(' ')[0].ToLower();

    switch (command)
    {
        case "/start":
            await bot.SendMessage(chatId,
                "üìä –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/set [—Å—É–º–º–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞\n" +
                "/pay [—Å—É–º–º–∞] - –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂\n" +
                "/status - —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫\n" +
                "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π");
            break;

        case "/set":
            await SetCreditAmount(chatId, text);
            break;

        case "/pay":
            await ProcessPayment(chatId, text);
            break;

        case "/status":
            await ShowStatus(chatId);
            break;

        case "/history":
            await ShowHistory(chatId);
            break;

        default:
            await bot.SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
            break;
    }
}

Task HandlePollingErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken ct)
{
    var errorMessage = exception switch
    {
        ApiRequestException apiRequestException
            => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
        _ => exception.ToString()
    };

    Console.WriteLine(errorMessage);
    return Task.CompletedTask;
}

// Redis –∫–ª—é—á–∏
static string GetCreditKey(long chatId) => $"credit:{chatId}";
static string GetHistoryKey(long chatId) => $"history:{chatId}";

// –†–∞–±–æ—Ç–∞ —Å –∫—Ä–µ–¥–∏—Ç–æ–º
async Task SetCreditAmount(long chatId, string text)
{
    var parts = text.Split(' ');
    if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var amount))
    {
        await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set 100000");
        return;
    }

    var creditData = new CreditData
    {
        InitialAmount = amount,
        CurrentAmount = amount
    };

    await redis.StringSetAsync(GetCreditKey(chatId), JsonSerializer.Serialize(creditData));
    await redis.KeyDeleteAsync(GetHistoryKey(chatId)); // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é

    await botClient.SendMessage(chatId, $"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount:C}");
}

async Task ProcessPayment(long chatId, string text)
{
    var creditJson = await redis.StringGetAsync(GetCreditKey(chatId));
    if (creditJson.IsNullOrEmpty)
    {
        await botClient.SendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (/set [—Å—É–º–º–∞])");
        return;
    }

    var parts = text.Split(' ');
    if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var payment))
    {
        await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay 15000");
        return;
    }

    var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
    credit.CurrentAmount -= payment;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
    await redis.StringSetAsync(GetCreditKey(chatId), JsonSerializer.Serialize(credit));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏—é
    var paymentRecord = new PaymentRecord
    {
        Amount = payment,
        Date = DateTime.UtcNow,
        NewBalance = credit.CurrentAmount
    };
    await redis.ListRightPushAsync(GetHistoryKey(chatId), JsonSerializer.Serialize(paymentRecord));

    await botClient.SendMessage(chatId,
        $"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment:C} –ø—Ä–∏–Ω—è—Ç!\n" +
        $"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {credit.CurrentAmount:C}");
}

async Task ShowStatus(long chatId)
{
    var creditJson = await redis.StringGetAsync(GetCreditKey(chatId));
    if (creditJson.IsNullOrEmpty)
    {
        await botClient.SendMessage(chatId, "‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set [—Å—É–º–º–∞]");
        return;
    }

    var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
    await botClient.SendMessage(chatId, $"üí≥ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount:C}");
}

async Task ShowHistory(long chatId)
{
    var history = await redis.ListRangeAsync(GetHistoryKey(chatId));
    if (history.Length == 0)
    {
        await botClient.SendMessage(chatId, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞");
        return;
    }

    var response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n";
    foreach (var item in history)
    {
        var payment = JsonSerializer.Deserialize<PaymentRecord>(item!);
        response += $"{payment!.Date:dd.MM.yyyy}: -{payment.Amount:C} ‚Üí {payment.NewBalance:C}\n";
    }

    await botClient.SendMessage(chatId, response);
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
record CreditData
{
    public decimal InitialAmount { get; set; }
    public decimal CurrentAmount { get; set; }
}

record PaymentRecord
{
    public decimal Amount { get; set; }
    public DateTime Date { get; set; }
    public decimal NewBalance { get; set; }
}

// –°–µ—Ä–≤–∏—Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class MonthlyReminderService
{
    private readonly ITelegramBotClient _bot;
    private readonly IDatabase _redis;
    private Timer? _timer;

    public MonthlyReminderService(ITelegramBotClient bot, IDatabase redis)
    {
        _bot = bot;
        _redis = redis;
    }

    public void Start()
    {
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 1-–≥–æ —á–∏—Å–ª–∞
        var now = DateTime.UtcNow;
        var nextDate = new DateTime(now.Year, now.Month, 1).AddMonths(1);
        var initialDelay = nextDate - now;

        _timer = new Timer(SendReminders, null, initialDelay, TimeSpan.FromDays(30));
    }

    private async void SendReminders(object? state)
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        var keys = _redis.Multiplexer.GetServer(_redis.Multiplexer.GetEndPoints().First())
            .Keys(pattern: "credit:*")
            .ToArray();

        foreach (var key in keys)
        {
            var chatId = long.Parse(key.ToString().Split(':')[1]);
            var creditJson = await _redis.StringGetAsync(key);
            if (creditJson.IsNullOrEmpty) continue;

            var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
            if (credit.CurrentAmount > 0)
            {
                await _bot.SendMessage(
                    chatId: chatId,
                    text: $"üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount:C}"
                );
            }
        }
    }
}