using StackExchange.Redis;
using System.Text.Json;
using Telegram.Bot;

using Ipoteka.Models;

namespace Ipoteka.Services;

public class MonthlyReminderService
{
    private readonly ITelegramBotClient _bot;
    private readonly IDatabase _redis;
    private readonly string[] _readTokens;
    private Timer? _timer;

    public MonthlyReminderService(ITelegramBotClient bot, IDatabase redis, string[] readTokens)
    {
        _bot = bot;
        _redis = redis;
        _readTokens = readTokens;
    }

    public void Start()
    {
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 1-–≥–æ —á–∏—Å–ª–∞
        var now = DateTime.UtcNow;
        var nextDate = new DateTime(now.Year, now.Month, 1).AddMonths(1);
        var initialDelay = nextDate - now;

        _timer = new Timer(SendMonthlyReminders, null, initialDelay, TimeSpan.FromDays(30));
    }

    private async void SendMonthlyReminders(object? state)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
            var creditJson = await _redis.StringGetAsync(UtilityKeys.CreditKey());
            if (creditJson.IsNullOrEmpty) return;

            var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            var history = await _redis.ListRangeAsync(UtilityKeys.HistoryKey());
            var historyText = history.Length == 0
                ? "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
                : $"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n{string.Join("\n", history.Select(h =>
                {
                    var p = JsonSerializer.Deserialize<PaymentRecord>(h!);
                    return $"{p!.Date:dd.MM.yyyy}: -{p.Amount} —Ä";
                }))}";

            var message = $"üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n" +
                          $"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä\n" +
                          $"{historyText}";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
            var chatIds = await _redis.SetMembersAsync(UtilityKeys.AuthChatsKey());
            foreach (var chatIdValue in chatIds)
            {
                if (long.TryParse(chatIdValue.ToString(), out var chatId))
                {
                    try
                    {
                        await _bot.SendMessage(chatId, message);
                    }
                    catch
                    {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ex.Message}");
        }
    }
}
