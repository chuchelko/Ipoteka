using StackExchange.Redis;
using System.Globalization;
using System.Text.Json;
using System.Linq;

using Telegram.Bot;
using Ipoteka.Models;

namespace Ipoteka.Handlers;

public class FinanceHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly string[] _finToken;

    public FinanceHandler(ITelegramBotClient botClient, string[] finToken)
    {
        _botClient = botClient;
        _finToken = finToken;
    }

    public async Task HandleFinAuth(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω. –ü—Ä–∏–º–µ—Ä: /fin_auth –≤–∞—à_—Ç–æ–∫–µ–Ω");
            return;
        }

        if (_finToken.Contains(text.Split(' ')[1].Trim()))
        {
            await redis.SetAddAsync(UtilityKeys.FinAuthUsersKey(), userId);
            await _botClient.SendMessage(userId, "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
        }
        else
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
        }
    }

    public async Task HandleFinAddCategory(long userId, string text, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var parts = text.Split(' ', 2);
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /fin_add_category –ï–¥–∞");
            return;
        }

        var category = parts[1].Trim();
        await redis.SetAddAsync(UtilityKeys.FinCategoriesKey(userId), category);
        await _botClient.SendMessage(userId, $"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞");
    }

    public async Task HandleFinListCategories(long userId, IDatabase redis)
    {
        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        var list = string.Join("\n", categories.Select(c => $"‚Ä¢ {c}"));
        await _botClient.SendMessage(userId, $"üìÇ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{list}");
    }

    public async Task HandleFinSetBudget(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 3 ||
            !decimal.TryParse(parts[2], CultureInfo.InvariantCulture, out var limit))
        {
            await _botClient.SendMessage(userId, "‚ùå –§–æ—Ä–º–∞—Ç: /fin_set_budget 2025-10 50000");
            return;
        }

        var month = parts[1].Trim();
        var data = new { Limit = limit, Spent = 0m };
        await redis.StringSetAsync(UtilityKeys.FinBudgetKey(userId, month), JsonSerializer.Serialize(data));

        await _botClient.SendMessage(userId, $"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {month} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}‚ÇΩ");
    }

    public async Task HandleFinAddExpense(long userId, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        // –ü—Ä–∏–º–µ—Ä ‚Äî –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        await _botClient.SendMessage(userId, "üí° –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –ø–æ –∫–Ω–æ–ø–∫–∞–º.");
    }

    public async Task HandleFinAnalytics(long userId, string text, IDatabase redis)
    {
        var month = text.Split(' ').ElementAtOrDefault(1) ?? DateTime.UtcNow.ToString("yyyy-MM");
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var list = await redis.ListRangeAsync(key);
        if (list.Length == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ {month}");
            return;
        }

        var expenses = list
            .Select(j => JsonSerializer.Deserialize<ExpenseRecord>(j!)!)
            .GroupBy(e => e.Category)
            .Select(g => new { Category = g.Key, Sum = g.Sum(x => x.Amount) })
            .ToList();

        var total = expenses.Sum(x => x.Sum);
        var textReport = string.Join("\n", expenses.Select(e => $"{e.Category}: {e.Sum}‚ÇΩ ({e.Sum / total:P0})"));
        await _botClient.SendMessage(userId, $"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {month}:\n{textReport}");
    }
}
