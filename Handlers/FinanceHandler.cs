using StackExchange.Redis;
using System.Globalization;
using System.Text.Json;
using System.Linq;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Ipoteka.Models;

namespace Ipoteka.Handlers;

public class FinanceHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly string[] _finToken;

    public FinanceHandler(ITelegramBotClient botClient, string[] finToken)
    {
        _botClient = botClient;
        _finToken = finToken;
    }

    private static DateTime GetCurrentTimeUtc3()
    {
        return TimeZoneInfo.ConvertTime(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Europe/Moscow"));
    }

    public async Task HandleFinAuth(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω. –ü—Ä–∏–º–µ—Ä: /fin_auth –≤–∞—à_—Ç–æ–∫–µ–Ω");
            return;
        }

        if (_finToken.Contains(text.Split(' ')[1].Trim()))
        {
            await redis.SetAddAsync(UtilityKeys.FinAuthUsersKey(), userId);
            await _botClient.SendMessage(userId, "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
        }
        else
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
        }
    }

    public async Task HandleFinAddCategory(long userId, string text, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var parts = text.Split(' ', 2);
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /fin_add_category –ï–¥–∞");
            return;
        }

        var category = parts[1].Trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (await redis.SetContainsAsync(UtilityKeys.FinCategoriesKey(userId), category))
        {
            await _botClient.SendMessage(userId, $"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await redis.SetAddAsync(UtilityKeys.FinCategoriesKey(userId), category);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
        var tempCategoryKey = $"temp_category:{userId}:{category}";
        await redis.StringSetAsync(tempCategoryKey, category);

        await _botClient.SendMessage(userId,
            $"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000):");
    }

    public async Task HandleFinListCategories(long userId, IDatabase redis)
    {
        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        var list = string.Join("\n", categories.Select(c => $"‚Ä¢ {c}"));
        await _botClient.SendMessage(userId, $"üìÇ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{list}");
    }

    public async Task HandleFinSetBudget(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 3 ||
            !decimal.TryParse(parts[2], CultureInfo.InvariantCulture, out var limit))
        {
            await _botClient.SendMessage(userId, "‚ùå –§–æ—Ä–º–∞—Ç: /fin_set_budget 2025-10 50000");
            return;
        }

        var month = parts[1].Trim();
        var data = new { Limit = limit, Spent = 0m };
        await redis.StringSetAsync(UtilityKeys.FinBudgetKey(userId, month), JsonSerializer.Serialize(data));

        await _botClient.SendMessage(userId, $"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {month} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}‚ÇΩ");
    }

    public async Task HandleFinAddExpense(long userId, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        var buttons = categories.Select(category => InlineKeyboardButton.WithCallbackData(
            category.ToString(), $"expense_category:{category}:{userId}")).ToList();

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        var rows = new List<IEnumerable<InlineKeyboardButton>>();
        for (int i = 0; i < buttons.Count; i += 2)
        {
            rows.Add(buttons.Skip(i).Take(2));
        }

        var inlineKeyboard = new InlineKeyboardMarkup(rows);

        await _botClient.SendMessage(userId,
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:",
            replyMarkup: inlineKeyboard);
    }

    public async Task HandleFinAnalytics(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ', 2);
        var monthParam = parts.Length > 1 ? parts[1] : null;

        if (monthParam == null)
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
            await ShowMonthSelection(userId, redis);
            return;
        }

        var month = monthParam;
        await ShowExpenseAnalytics(userId, month, redis);
    }

    private async Task ShowMonthSelection(long userId, IDatabase redis)
    {
        var currentMonth = GetCurrentTimeUtc3();
        var months = new List<string>();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ 5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
        for (int i = 0; i < 6; i++)
        {
            var monthDate = currentMonth.AddMonths(-i);
            months.Add(monthDate.ToString("yyyy-MM"));
        }

        var buttons = months.Select(month => InlineKeyboardButton.WithCallbackData(
            $"{month} ({GetMonthName(month)})",
            $"analytics_month:{month}:{userId}")).ToList();

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        var rows = new List<IEnumerable<InlineKeyboardButton>>();
        for (int i = 0; i < buttons.Count; i += 2)
        {
            rows.Add(buttons.Skip(i).Take(2));
        }

        var inlineKeyboard = new InlineKeyboardMarkup(rows);

        await _botClient.SendMessage(userId,
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
            replyMarkup: inlineKeyboard);
    }

    public async Task ShowExpenseAnalytics(long userId, string month, IDatabase redis)
    {
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var list = await redis.ListRangeAsync(key);
        if (list.Length == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ {month}");
            return;
        }

        var expenses = list
            .Select(j => JsonSerializer.Deserialize<ExpenseRecord>(j!)!)
            .GroupBy(e => e.Category)
            .Select(g => {
                dynamic dynamicExpense = new { Category = g.Key, Sum = g.Sum(x => x.Amount), Planned = GetPlannedAmount(userId, g.Key, redis) };
                return dynamicExpense;
                })
            .ToList();

        if (expenses.Count == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}");
            return;
        }

        var totalSpent = expenses.Sum(x => x.Sum);
        var totalPlanned = expenses.Sum(x => x.Planned);

        var analyticsText = $"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {month} ({GetMonthName(month)}):\n\n";

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        foreach (var expense in expenses.OrderByDescending(x => x.Sum))
        {
            double percentage = expense.Planned > 0 ? (double)(expense.Sum / expense.Planned * 100) : 0;
            var status = GetStatusEmoji(percentage);

            analyticsText += $"{status} {expense.Category}:\n";
            analyticsText += $"  üí∞ –§–∞–∫—Ç: {expense.Sum}‚ÇΩ\n";
            analyticsText += $"  üìã –ü–ª–∞–Ω: {expense.Planned}‚ÇΩ\n";
            analyticsText += $"  üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {percentage:F1}%\n";
            analyticsText += $"  {GetProgressBar(percentage)}\n\n";
        }

        analyticsText += $"üí∞ –û–±—â–∏–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥: {totalSpent}‚ÇΩ\n";
        analyticsText += $"üìã –û–±—â–∏–π –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥: {totalPlanned}‚ÇΩ\n";
        analyticsText += $"üìà –û–±—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {(totalPlanned > 0 ? (totalSpent / totalPlanned * 100) : 0)}:F1%\n";

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        analyticsText += $"\nüìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n{GenerateTextChart(expenses)}";

        await _botClient.SendMessage(userId, analyticsText);
    }

    private static decimal GetPlannedAmount(long userId, string category, IDatabase redis)
    {
        var categoryKey = UtilityKeys.FinCategoryDataKey(userId, category);
        var categoryJson = redis.StringGet(categoryKey);
        if (categoryJson.IsNullOrEmpty) return 0;

        var categoryData = JsonSerializer.Deserialize<CategoryRecord>(categoryJson!);
        return categoryData?.PlannedAmount ?? 0;
    }

    private static string GetMonthName(string month)
    {
        var months = new[]
        {
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        };

        if (DateTime.TryParse($"{month}-01", out var date))
        {
            return $"{months[date.Month - 1]} {date.Year}";
        }

        return month;
    }

    private static string GetStatusEmoji(double percentage)
    {
        if (percentage <= 50) return "üü¢";
        if (percentage <= 80) return "üü°";
        if (percentage <= 100) return "üü†";
        return "üî¥";
    }

    private static string GetProgressBar(double percentage)
    {
        var filled = (int)Math.Round(percentage / 10);
        var empty = 10 - filled;

        return $"[{"".PadRight(filled, '‚ñà')}{"".PadRight(empty, '‚ñë')}] {percentage:F0}%";
    }

    private static string GenerateTextChart(List<dynamic> expenses)
    {
        if (expenses.Count == 0) return "";

        var maxAmount = expenses.Max(x => x.Sum);
        var chart = "";

        foreach (var expense in expenses.OrderByDescending(x => x.Sum))
        {
            var barLength = maxAmount > 0 ? (int)((expense.Sum / maxAmount) * 20) : 0;
            var bar = "".PadRight(barLength, '‚ñà');
            chart += $"{expense.Category,-15} {bar} {expense.Sum,6:F0}‚ÇΩ\n";
        }

        return chart;
    }

    public async Task HandleExpenseHistory(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ', 2);
        var month = parts.Length > 1 ? parts[1] : DateTime.UtcNow.ToString("yyyy-MM");

        var key = UtilityKeys.FinExpensesKey(userId, month);
        var expenses = await redis.ListRangeAsync(key);

        if (expenses.Length == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month}");
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
        var expenseList = expenses
            .Select((json, index) => (JsonSerializer.Deserialize<ExpenseRecord>(json!)!, index))
            .ToList();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–µ—Ä–≤—ã–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤)
        await ShowExpenseHistoryPage(userId, expenseList, month, 0, redis);
    }

    private async Task ShowExpenseHistoryPage(long userId, List<(ExpenseRecord expense, int index)> expenses, string month, int page, IDatabase redis)
    {
        const int itemsPerPage = 5;
        var totalPages = (int)Math.Ceiling(expenses.Count / (double)itemsPerPage);
        var startIndex = page * itemsPerPage;
        var endIndex = Math.Min(startIndex + itemsPerPage, expenses.Count);

        var pageExpenses = expenses.Skip(startIndex).Take(itemsPerPage).ToList();

        var response = $"üìú –†–∞—Å—Ö–æ–¥—ã –∑–∞ {month} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{totalPages}):\n\n";

        for (int i = 0; i < pageExpenses.Count; i++)
        {
            var (expense, originalIndex) = pageExpenses[i];
            var expenseNumber = startIndex + i + 1;
            response += $"{expenseNumber}. {expense.Category}: {expense.Amount}‚ÇΩ - {expense.Date:dd.MM.yyyy HH:mm}\n";
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        var buttons = new List<InlineKeyboardButton[]>();

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        var navButtons = new List<InlineKeyboardButton>();
        if (page > 0)
            navButtons.Add(InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"expense_history_page:{month}:{page - 1}:{userId}"));

        if (page < totalPages - 1)
            navButtons.Add(InlineKeyboardButton.WithCallbackData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", $"expense_history_page:{month}:{page + 1}:{userId}"));

        if (navButtons.Count > 0)
            buttons.Add(navButtons.ToArray());

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
        for (int i = 0; i < pageExpenses.Count; i++)
        {
            var (expense, originalIndex) = pageExpenses[i];
            var expenseNumber = startIndex + i + 1;
            var actionButtons = new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {expenseNumber}", $"expense_edit:{month}:{originalIndex}:{userId}"),
                InlineKeyboardButton.WithCallbackData($"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {expenseNumber}", $"expense_delete:{month}:{originalIndex}:{userId}")
            };
            buttons.Add(actionButtons);
        }

        var inlineKeyboard = new InlineKeyboardMarkup(buttons);

        await _botClient.SendMessage(userId, response, replyMarkup: inlineKeyboard);
    }

    public async Task HandleExpenseCallback(long userId, string callbackData, IDatabase redis)
    {
        var parts = callbackData.Split(':');
        if (parts.Length < 3 || parts[0] != "expense_category") return;

        var category = parts[1];
        var originalUserId = long.Parse(parts[2]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (originalUserId != userId) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.AnswerCallbackQuery(callbackData, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        var amountButtons = new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", $"expense_amount:{category}:{userId}") },
            new[] { InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∞", $"expense_cancel:{userId}") }
        };

        var keyboard = new InlineKeyboardMarkup(amountButtons);

        await _botClient.SendMessage(userId,
            $"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)",
            replyMarkup: keyboard);

        await _botClient.AnswerCallbackQuery(callbackData, $"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}", showAlert: false);
    }

    public async Task HandleExpenseAmount(long userId, string messageText, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        if (!decimal.TryParse(messageText.Replace(" ", "").Replace(",", "."), NumberStyles.Currency, CultureInfo.InvariantCulture, out var amount))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)");
            return;
        }

        if (amount <= 0)
        {
            await _botClient.SendMessage(userId, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        var selectedCategoryKey = $"expense_temp_category:{userId}";
        var category = await redis.StringGetAsync(selectedCategoryKey);

        if (category.IsNullOrEmpty)
        {
            await _botClient.SendMessage(userId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /fin_add_expense");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
        var expense = new ExpenseRecord
        {
            UserId = userId,
            Category = category.ToString(),
            Amount = amount,
            Description = $"–†–∞—Å—Ö–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}",
            Date = GetCurrentTimeUtc3()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥
        var currentMonth = GetCurrentTimeUtc3().ToString("yyyy-MM");
        await redis.ListRightPushAsync(UtilityKeys.FinExpensesKey(userId, currentMonth),
            JsonSerializer.Serialize(expense));

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await redis.KeyDeleteAsync(selectedCategoryKey);

        await _botClient.SendMessage(userId,
            $"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüí∞ –°—É–º–º–∞: {amount}‚ÇΩ\nüìÖ –î–∞—Ç–∞: {expense.Date:dd.MM.yyyy HH:mm}",
            replyMarkup: new ReplyKeyboardRemove());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await HandleFinAnalytics(userId, $"/fin_analytics {currentMonth}", redis);
    }

    public async Task HandleCategoryPlannedAmount(long userId, string messageText, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        if (!decimal.TryParse(messageText.Replace(" ", "").Replace(",", "."), NumberStyles.Currency, CultureInfo.InvariantCulture, out var plannedAmount))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000)");
            return;
        }

        if (plannedAmount < 0)
        {
            await _botClient.SendMessage(userId, "‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
            return;
        }

        // –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        var pattern = $"temp_category:{userId}:*";
        var tempKeys = GetKeysByPattern(redis, pattern);

        if (tempKeys.Length == 0)
        {
            await _botClient.SendMessage(userId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        var tempCategoryKey = tempKeys[0];
        var category = await redis.StringGetAsync(tempCategoryKey);

        if (category.IsNullOrEmpty)
        {
            await _botClient.SendMessage(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º —Ä–∞—Å—Ö–æ–¥–æ–º
        var categoryRecord = new CategoryRecord
        {
            UserId = userId,
            Name = category.ToString(),
            PlannedAmount = plannedAmount,
            CreatedAt = GetCurrentTimeUtc3()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await redis.StringSetAsync(UtilityKeys.FinCategoryDataKey(userId, category.ToString()),
            JsonSerializer.Serialize(categoryRecord));

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await redis.KeyDeleteAsync(tempCategoryKey);

        await _botClient.SendMessage(userId,
            $"‚úÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥: {plannedAmount}‚ÇΩ –≤ –º–µ—Å—è—Ü",
            replyMarkup: new ReplyKeyboardRemove());
    }

    private string[] GetKeysByPattern(IDatabase redis, string pattern)
    {
        var server = redis.Multiplexer.GetServer(redis.Multiplexer.GetEndPoints()[0]);
        var keys = server.Keys(pattern: pattern).ToArray();
        return keys.Select(k => k.ToString()).ToArray();
    }

    public async Task HandleExpenseHistoryCallback(long userId, string callbackData, IDatabase redis)
    {
        var parts = callbackData.Split(':');
        if (parts.Length < 4) return;

        var action = parts[0];
        var month = parts[1];
        var originalUserId = long.Parse(parts[3]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (originalUserId != userId) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.AnswerCallbackQuery(callbackData, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        switch (action)
        {
            case "expense_history_page":
                // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ–º parts[2] –∫–∞–∫ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if (int.TryParse(parts[2], out var page))
                {
                    await ShowExpenseHistoryPage(userId, month, page, redis);
                }
                break;

            case "expense_edit":
            case "expense_delete":
            case "expense_delete_confirm":
                // –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º parts[2] –∫–∞–∫ –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Ö–æ–¥–∞
                if (int.TryParse(parts[2], out var expenseIndex))
                {
                    switch (action)
                    {
                        case "expense_edit":
                            await StartExpenseEdit(userId, month, expenseIndex, redis);
                            break;
                        case "expense_delete":
                            await ConfirmExpenseDelete(userId, month, expenseIndex, redis);
                            break;
                        case "expense_delete_confirm":
                            await DeleteExpense(userId, month, expenseIndex, redis);
                            break;
                    }
                }
                break;

            case "expense_delete_cancel":
                await _botClient.AnswerCallbackQuery(callbackData, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                await ShowExpenseHistoryPage(userId, month, 0, redis);
                break;
        }

        await _botClient.AnswerCallbackQuery(callbackData, null, showAlert: false);
    }

    private async Task ShowExpenseHistoryPage(long userId, string month, int page, IDatabase redis)
    {
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var expenses = await redis.ListRangeAsync(key);

        if (expenses.Length == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month}");
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
        var expenseList = expenses
            .Select((json, index) => (JsonSerializer.Deserialize<ExpenseRecord>(json!)!, index))
            .ToList();

        await ShowExpenseHistoryPage(userId, expenseList, month, page, redis);
    }

    private async Task StartExpenseEdit(long userId, string month, int expenseIndex, IDatabase redis)
    {
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var expenses = await redis.ListRangeAsync(key);

        if (expenseIndex < 0 || expenseIndex >= expenses.Length)
        {
            await _botClient.SendMessage(userId, "‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        var expense = JsonSerializer.Deserialize<ExpenseRecord>(expenses[expenseIndex]!)!;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
        var editKey = $"expense_edit:{userId}:{month}:{expenseIndex}";
        await redis.StringSetAsync(editKey, JsonSerializer.Serialize(expense));

        var editButtons = new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", $"expense_edit_amount:{month}:{expenseIndex}:{userId}") },
            new[] { InlineKeyboardButton.WithCallbackData("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", $"expense_edit_category:{month}:{expenseIndex}:{userId}") },
            new[] { InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∞", $"expense_edit_cancel:{month}:{expenseIndex}:{userId}") }
        };

        var keyboard = new InlineKeyboardMarkup(editButtons);

        await _botClient.SendMessage(userId,
            $"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.Category}\nüí∞ –°—É–º–º–∞: {expense.Amount}‚ÇΩ\nüìÖ –î–∞—Ç–∞: {expense.Date:dd.MM.yyyy HH:mm}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
            replyMarkup: keyboard);
    }

    private async Task ConfirmExpenseDelete(long userId, string month, int expenseIndex, IDatabase redis)
    {
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var expenses = await redis.ListRangeAsync(key);

        if (expenseIndex < 0 || expenseIndex >= expenses.Length)
        {
            await _botClient.SendMessage(userId, "‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        var expense = JsonSerializer.Deserialize<ExpenseRecord>(expenses[expenseIndex]!)!;

        var confirmButtons = new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", $"expense_delete_confirm:{month}:{expenseIndex}:{userId}") },
            new[] { InlineKeyboardButton.WithCallbackData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", $"expense_delete_cancel:{month}:{expenseIndex}:{userId}") }
        };

        var keyboard = new InlineKeyboardMarkup(confirmButtons);

        await _botClient.SendMessage(userId,
            $"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥?\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.Category}\nüí∞ –°—É–º–º–∞: {expense.Amount}‚ÇΩ\nüìÖ –î–∞—Ç–∞: {expense.Date:dd.MM.yyyy HH:mm}",
            replyMarkup: keyboard);
    }

    private async Task DeleteExpense(long userId, string month, int expenseIndex, IDatabase redis)
    {
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var expenses = await redis.ListRangeAsync(key);

        if (expenseIndex < 0 || expenseIndex >= expenses.Length)
        {
            await _botClient.SendMessage(userId, "‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
        await redis.ListSetByIndexAsync(key, expenseIndex, RedisValue.Null);
        await redis.ListTrimAsync(key, 0, expenses.Length - 2);

        await _botClient.SendMessage(userId, "‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω!");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        await ShowExpenseHistoryPage(userId, month, 0, redis);
    }
}
