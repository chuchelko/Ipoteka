using StackExchange.Redis;
using System.Globalization;
using System.Text.Json;
using System.Linq;

using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Ipoteka.Models;

namespace Ipoteka.Handlers;

public class FinanceHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly string[] _finToken;

    public FinanceHandler(ITelegramBotClient botClient, string[] finToken)
    {
        _botClient = botClient;
        _finToken = finToken;
    }

    public async Task HandleFinAuth(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω. –ü—Ä–∏–º–µ—Ä: /fin_auth –≤–∞—à_—Ç–æ–∫–µ–Ω");
            return;
        }

        if (_finToken.Contains(text.Split(' ')[1].Trim()))
        {
            await redis.SetAddAsync(UtilityKeys.FinAuthUsersKey(), userId);
            await _botClient.SendMessage(userId, "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
        }
        else
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
        }
    }

    public async Task HandleFinAddCategory(long userId, string text, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var parts = text.Split(' ', 2);
        if (parts.Length < 2)
        {
            await _botClient.SendMessage(userId, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /fin_add_category –ï–¥–∞");
            return;
        }

        var category = parts[1].Trim();
        await redis.SetAddAsync(UtilityKeys.FinCategoriesKey(userId), category);
        await _botClient.SendMessage(userId, $"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞");
    }

    public async Task HandleFinListCategories(long userId, IDatabase redis)
    {
        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        var list = string.Join("\n", categories.Select(c => $"‚Ä¢ {c}"));
        await _botClient.SendMessage(userId, $"üìÇ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{list}");
    }

    public async Task HandleFinSetBudget(long userId, string text, IDatabase redis)
    {
        var parts = text.Split(' ');
        if (parts.Length < 3 ||
            !decimal.TryParse(parts[2], CultureInfo.InvariantCulture, out var limit))
        {
            await _botClient.SendMessage(userId, "‚ùå –§–æ—Ä–º–∞—Ç: /fin_set_budget 2025-10 50000");
            return;
        }

        var month = parts[1].Trim();
        var data = new { Limit = limit, Spent = 0m };
        await redis.StringSetAsync(UtilityKeys.FinBudgetKey(userId, month), JsonSerializer.Serialize(data));

        await _botClient.SendMessage(userId, $"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {month} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}‚ÇΩ");
    }

    public async Task HandleFinAddExpense(long userId, IDatabase redis)
    {
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /fin_auth [—Ç–æ–∫–µ–Ω]");
            return;
        }

        var categories = await redis.SetMembersAsync(UtilityKeys.FinCategoriesKey(userId));
        if (categories.Length == 0)
        {
            await _botClient.SendMessage(userId, "üìÇ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /fin_add_category");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        var buttons = categories.Select(category => InlineKeyboardButton.WithCallbackData(
            category.ToString(), $"expense_category:{category}:{userId}")).ToList();

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        var rows = new List<IEnumerable<InlineKeyboardButton>>();
        for (int i = 0; i < buttons.Count; i += 2)
        {
            rows.Add(buttons.Skip(i).Take(2));
        }

        var inlineKeyboard = new InlineKeyboardMarkup(rows);

        await _botClient.SendMessage(userId,
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:",
            replyMarkup: inlineKeyboard);
    }

    public async Task HandleFinAnalytics(long userId, string text, IDatabase redis)
    {
        var month = text.Split(' ').ElementAtOrDefault(1) ?? DateTime.UtcNow.ToString("yyyy-MM");
        var key = UtilityKeys.FinExpensesKey(userId, month);
        var list = await redis.ListRangeAsync(key);
        if (list.Length == 0)
        {
            await _botClient.SendMessage(userId, $"üì≠ –ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ {month}");
            return;
        }

        var expenses = list
            .Select(j => JsonSerializer.Deserialize<ExpenseRecord>(j!)!)
            .GroupBy(e => e.Category)
            .Select(g => new { Category = g.Key, Sum = g.Sum(x => x.Amount) })
            .ToList();

        var total = expenses.Sum(x => x.Sum);
        var textReport = string.Join("\n", expenses.Select(e => $"{e.Category}: {e.Sum}‚ÇΩ ({e.Sum / total:P0})"));
        await _botClient.SendMessage(userId, $"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {month}:\n{textReport}");
    }

    public async Task HandleExpenseCallback(long userId, string callbackData, IDatabase redis)
    {
        var parts = callbackData.Split(':');
        if (parts.Length < 3 || parts[0] != "expense_category") return;

        var category = parts[1];
        var originalUserId = long.Parse(parts[2]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (originalUserId != userId) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.AnswerCallbackQuery(callbackData, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        var amountButtons = new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", $"expense_amount:{category}:{userId}") },
            new[] { InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∞", $"expense_cancel:{userId}") }
        };

        var keyboard = new InlineKeyboardMarkup(amountButtons);

        await _botClient.SendMessage(userId,
            $"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)",
            replyMarkup: keyboard);

        await _botClient.AnswerCallbackQuery(callbackData, $"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}");
    }

    public async Task HandleExpenseAmount(long userId, string messageText, IDatabase redis)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!await redis.SetContainsAsync(UtilityKeys.FinAuthUsersKey(), userId))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É");
            return;
        }

        if (!decimal.TryParse(messageText.Replace(" ", "").Replace(",", "."), NumberStyles.Currency, CultureInfo.InvariantCulture, out var amount))
        {
            await _botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)");
            return;
        }

        if (amount <= 0)
        {
            await _botClient.SendMessage(userId, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        var selectedCategoryKey = $"expense_temp_category:{userId}";
        var category = await redis.StringGetAsync(selectedCategoryKey);

        if (category.IsNullOrEmpty)
        {
            await _botClient.SendMessage(userId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /fin_add_expense");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
        var expense = new ExpenseRecord
        {
            UserId = userId,
            Category = category.ToString(),
            Amount = amount,
            Description = $"–†–∞—Å—Ö–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}",
            Date = DateTime.UtcNow
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥
        var currentMonth = DateTime.UtcNow.ToString("yyyy-MM");
        await redis.ListRightPushAsync(UtilityKeys.FinExpensesKey(userId, currentMonth),
            JsonSerializer.Serialize(expense));

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await redis.KeyDeleteAsync(selectedCategoryKey);

        await _botClient.SendMessage(userId,
            $"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüí∞ –°—É–º–º–∞: {amount}‚ÇΩ\nüìÖ –î–∞—Ç–∞: {expense.Date:dd.MM.yyyy HH:mm}",
            replyMarkup: new ReplyKeyboardRemove());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await HandleFinAnalytics(userId, $"/fin_analytics {currentMonth}", redis);
    }
}
