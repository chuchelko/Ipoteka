using StackExchange.Redis;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Microsoft.Extensions.Hosting;
using System.Globalization;
using System.Text.Json;

var builder = Host.CreateApplicationBuilder(args);
var host = builder.Build();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
var redisConnection = await ConnectionMultiplexer.ConnectAsync(
    Environment.GetEnvironmentVariable("REDIS_URL") ?? "localhost:6379");
var redis = redisConnection.GetDatabase();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
var token = Environment.GetEnvironmentVariable("BOT_TOKEN")
    ?? throw new Exception("BOT_TOKEN environment variable is not set");
var botClient = new TelegramBotClient(token);

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞
var readTokens = Environment.GetEnvironmentVariable("READ_TOKENS")?.Split(',')
                 ?? throw new Exception("READ_TOKENS not set");
var writeTokens = Environment.GetEnvironmentVariable("WRITE_TOKENS")?.Split(',')
                  ?? throw new Exception("WRITE_TOKENS not set");

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var reminderService = new MonthlyReminderService(botClient, redis, readTokens);
reminderService.Start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
var receiverOptions = new ReceiverOptions
{
    AllowedUpdates = []
};

botClient.StartReceiving(
    updateHandler: HandleUpdateAsync,
    errorHandler: HandlePollingErrorAsync,
    receiverOptions: receiverOptions
);

Console.WriteLine("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
await host.RunAsync();

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
{
    if (update.Message is not { } message) return;

    var chatId = message.Chat.Id;
    var userId = message.From?.Id ?? 0;
    var text = message.Text ?? string.Empty;
    var command = text.Split(' ')[0].ToLower();

    try
    {
        switch (command)
        {
            case "/start":
                await SendHelp(chatId);
                break;

            case "/authorize":
                await HandleAuthorize(chatId, text, redis);
                break;

            case "/user_authorize":
                await HandleUserAuthorize(userId, text, redis);
                break;

            case "/set":
                await HandleSet(chatId, userId, text, redis);
                break;

            case "/pay":
                await HandlePay(userId, text, redis);
                break;

            case "/status":
                await ShowStatus(chatId, redis);
                break;

            case "/history":
                await ShowHistory(chatId, redis);
                break;

            case "/gav":
                await botClient.SendMessage(chatId, "–ì–ê–í");
                break;

            default:
                await botClient.SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
                break;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {ex.Message}");
        await botClient.SendMessage(chatId, $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
    }
}

Task HandlePollingErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken ct)
{
    var errorMessage = exception switch
    {
        ApiRequestException apiRequestException
            => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
        _ => exception.ToString()
    };

    Console.WriteLine(errorMessage);
    return Task.CompletedTask;
}

async Task SendHelp(long chatId)
{
    await botClient.SendMessage(chatId,
        "üè¶ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–º\n\n" +
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
        "/authorize [—Ç–æ–∫–µ–Ω] - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —á–∞—Ç (—á—Ç–µ–Ω–∏–µ)\n" +
        "/user_authorize [—Ç–æ–∫–µ–Ω] - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å–µ–±—è (–∑–∞–ø–∏—Å—å)\n" +
        "/set [—Å—É–º–º–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞\n" +
        "/pay [—Å—É–º–º–∞] - –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂\n" +
        "/status - —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫\n" +
        "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π");
}

async Task HandleAuthorize(long chatId, string text, IDatabase redis)
{
    var parts = text.Split(' ');
    if (parts.Length < 2)
    {
        await botClient.SendMessage(chatId, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /authorize –≤–∞—à_—Ç–æ–∫–µ–Ω");
        return;
    }

    var token = parts[1].Trim();
    if (readTokens.Contains(token) || writeTokens.Contains(token))
    {
        await redis.SetAddAsync(UtilityKeys.AuthChatsKey(), chatId);
        await botClient.SendMessage(chatId, "‚úÖ –ß–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è!");
    }
    else
    {
        await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
}

async Task HandleUserAuthorize(long userId, string text, IDatabase redis)
{
    var parts = text.Split(' ');
    if (parts.Length < 2)
    {
        return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –ø–æ—ç—Ç–æ–º—É –æ—à–∏–±–∫—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    }

    var token = parts[1].Trim();
    if (writeTokens.Contains(token))
    {
        await redis.SetAddAsync(UtilityKeys.AuthUsersKey(), userId);
        await botClient.SendMessage(userId, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π!");
    }
    else
    {
        await botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
}

async Task HandleSet(long chatId, long userId, string text, IDatabase redis)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!await redis.SetContainsAsync(UtilityKeys.AuthUsersKey(), userId))
    {
        await botClient.SendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞");
        return;
    }

    var parts = text.Split(' ');
    if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var amount))
    {
        await botClient.SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set 100000");
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
    var creditData = new CreditData
    {
        InitialAmount = amount,
        CurrentAmount = amount,
        LastUpdated = DateTime.UtcNow
    };

    await redis.StringSetAsync(UtilityKeys.CreditKey(), JsonSerializer.Serialize(creditData));

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await redis.KeyDeleteAsync(UtilityKeys.HistoryKey());

    await botClient.SendMessage(chatId, $"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount} —Ä");

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    await NotifyAllChats($"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {amount} —Ä", redis);
}

async Task HandlePay(long userId, string text, IDatabase redis)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!await redis.SetContainsAsync(UtilityKeys.AuthUsersKey(), userId))
    {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await botClient.SendMessage(userId,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /user_authorize [—Ç–æ–∫–µ–Ω]");
        return;
    }

    var parts = text.Split(' ');
    if (parts.Length < 2 || !decimal.TryParse(parts[1], NumberStyles.Currency, CultureInfo.InvariantCulture, out var payment))
    {
        await botClient.SendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay 15000");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
    var creditJson = await redis.StringGetAsync(UtilityKeys.CreditKey());
    if (creditJson.IsNullOrEmpty)
    {
        await botClient.SendMessage(userId, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (/set [—Å—É–º–º–∞])");
        return;
    }

    var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
    credit.CurrentAmount -= payment;
    credit.LastUpdated = DateTime.UtcNow;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
    await redis.StringSetAsync(UtilityKeys.CreditKey(), JsonSerializer.Serialize(credit));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏—é
    var paymentRecord = new PaymentRecord
    {
        UserId = userId,
        Amount = payment,
        Date = DateTime.UtcNow,
        NewBalance = credit.CurrentAmount
    };
    await redis.ListRightPushAsync(UtilityKeys.HistoryKey(), JsonSerializer.Serialize(paymentRecord));

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await botClient.SendMessage(userId,
        $"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment} —Ä –ø—Ä–∏–Ω—è—Ç!\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {credit.CurrentAmount} —Ä");

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    await NotifyAllChats($"üí≥ –í–Ω–µ—Å–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment} —Ä\n–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä", redis);
}

async Task ShowStatus(long chatId, IDatabase redis)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
    if (!await redis.SetContainsAsync(UtilityKeys.AuthChatsKey(), chatId))
    {
        await botClient.SendMessage(chatId, "‚ùå –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /authorize [—Ç–æ–∫–µ–Ω]");
        return;
    }

    var creditJson = await redis.StringGetAsync(UtilityKeys.CreditKey());
    if (creditJson.IsNullOrEmpty)
    {
        await botClient.SendMessage(chatId, "‚ùå –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        return;
    }

    var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;
    await botClient.SendMessage(chatId, $"üí≥ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä");
}

async Task ShowHistory(long chatId, IDatabase redis)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
    if (!await redis.SetContainsAsync(UtilityKeys.AuthChatsKey(), chatId))
    {
        await botClient.SendMessage(chatId, "‚ùå –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /authorize [—Ç–æ–∫–µ–Ω]");
        return;
    }

    var history = await redis.ListRangeAsync(UtilityKeys.HistoryKey());
    if (history.Length == 0)
    {
        await botClient.SendMessage(chatId, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞");
        return;
    }

    var response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n";
    foreach (var item in history)
    {
        var payment = JsonSerializer.Deserialize<PaymentRecord>(item!);
        response += $"{payment!.Date:dd.MM.yyyy}: -{payment.Amount} —Ä ‚Üí {payment.NewBalance} —Ä\n";
    }

    await botClient.SendMessage(chatId, response);
}

async Task NotifyAllChats(string message, IDatabase redis)
{
    var chatIds = await redis.SetMembersAsync(UtilityKeys.AuthChatsKey());
    foreach (var chatIdValue in chatIds)
    {
        if (long.TryParse(chatIdValue.ToString(), out var chatId))
        {
            try
            {
                await botClient.SendMessage(chatId, message);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chatId}: {ex.Message}");
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —á–∞—Ç—ã
                await redis.SetRemoveAsync(UtilityKeys.AuthChatsKey(), chatIdValue);
            }
        }
    }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ CreditKey, UtilityKeys.HistoryKey, UtilityKeys.AuthChatsKey –∏ UtilityKeys.AuthUsersKey –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å UtilityKeys
static class UtilityKeys
{
    public static string CreditKey() => "credit:global";
    public static string HistoryKey() => "history:global";
    public static string AuthChatsKey() => "auth:chats";
    public static string AuthUsersKey() => "auth:users";
}

record CreditData
{
    public decimal InitialAmount { get; set; }
    public decimal CurrentAmount { get; set; }
    public DateTime LastUpdated { get; set; }
}

record PaymentRecord
{
    public long UserId { get; set; }
    public decimal Amount { get; set; }
    public DateTime Date { get; set; }
    public decimal NewBalance { get; set; }
}

// –°–µ—Ä–≤–∏—Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class MonthlyReminderService
{
    private readonly ITelegramBotClient _bot;
    private readonly IDatabase _redis;
    private readonly string[] _readTokens;
    private Timer? _timer;

    public MonthlyReminderService(ITelegramBotClient bot, IDatabase redis, string[] readTokens)
    {
        _bot = bot;
        _redis = redis;
        _readTokens = readTokens;
    }

    public void Start()
    {
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 1-–≥–æ —á–∏—Å–ª–∞
        var now = DateTime.UtcNow;
        var nextDate = new DateTime(now.Year, now.Month, 1).AddMonths(1);
        var initialDelay = nextDate - now;

        _timer = new Timer(SendMonthlyReminders, null, initialDelay, TimeSpan.FromDays(30));
    }

    private async void SendMonthlyReminders(object? state)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
            var creditJson = await _redis.StringGetAsync(UtilityKeys.CreditKey());
            if (creditJson.IsNullOrEmpty) return;

            var credit = JsonSerializer.Deserialize<CreditData>(creditJson!)!;

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            var history = await _redis.ListRangeAsync(UtilityKeys.HistoryKey());
            var historyText = history.Length == 0
                ? "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
                : $"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n{string.Join("\n", history.Select(h => {
                    var p = JsonSerializer.Deserialize<PaymentRecord>(h!);
                    return $"{p!.Date:dd.MM.yyyy}: -{p.Amount} —Ä";
                }))}";

            var message = $"üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n" +
                          $"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {credit.CurrentAmount} —Ä\n" +
                          $"{historyText}";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
            var chatIds = await _redis.SetMembersAsync(UtilityKeys.AuthChatsKey());
            foreach (var chatIdValue in chatIds)
            {
                if (long.TryParse(chatIdValue.ToString(), out var chatId))
                {
                    try
                    {
                        await _bot.SendMessage(chatId, message);
                    }
                    catch
                    {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ex.Message}");
        }
    }
}
